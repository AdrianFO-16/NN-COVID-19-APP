import streamlit as st
import tensorflow.keras.backend as Kb
import tensorflow.keras as K
import numpy as np
import plotly.graph_objs as go
import json


st.set_page_config(
     page_title="NN COVID-19",
     layout="wide",
     page_icon = "游눌",
     initial_sidebar_state="expanded"
 )

st.sidebar.header("Selecciona la p치gina")
page = st.sidebar.selectbox("P치gina:", ["Introducci칩n", "Aplicaci칩n"])

@st.cache_data()
def get_model():
    return K.models.load_model("Modelos/"+selected_model+".h5", {"custom_objects": custom_loss})

def custom_loss(y_true, y_pred):
    loss = -(1/models_data[selected_model]["m"])*Kb.sum(5* y_true * Kb.log(Kb.abs(y_pred+1*10**-8))+ (1-y_true)*Kb.log(Kb.abs(1-y_pred+ 1*10**-8)))
    return loss

def get_gauge(pred):
    pred = round (pred*100)
    if pred>=50:
        color = "red"
    else:
        color = "orange"  
    fig = go.Figure()
    fig.add_trace(go.Indicator(
        mode = "gauge+number",
        value = pred,
        gauge = {"axis": {"range": [0, 100], "dtick": 25, "showticklabels": True, "tickcolor": "red"}, 
                 "bar":{"color": color, "thickness": 0.85}},
        number = {"suffix": "%"} ))
    fig.update_layout(
        height =550,
        width = 750)
    return fig

#### Inicializa sistema de versiones de modelos.
def load_models():

    with open('model_data.json') as json_file:
        models_data = json.load(json_file)
        
    return list(models_data.keys()), models_data


models_names, models_data = load_models()


if page == "Introducci칩n":
    st.markdown("<pre><h3 style='text-align: center; color: black; font-family: verdana;'>A.A.E.S         A.A.F.O         A.G.F         C.J.A.G         J.E.R.S</h3></pre>", unsafe_allow_html=True)
    #st.markdown("<pre><h3 style='text-align: center; color: black; font-family: verdana;'>Adolfo Arana Esp칤ritu Santo        Adri치n Augusto Ferrer Orgaz         Abraham Gil F칠lix         Carlos de Jes칰s 츼vila Gonz치lez         Jairo Enrique Ram칤rez S치nchez</h3></pre>", unsafe_allow_html=True)
    st.markdown("<hr><h1 style='text-align: center; color: black; font-family: verdana;'>Red Neuronal Multicapa para predecir la probabilidad de defunci칩n en casos de COVID-19</h1>", unsafe_allow_html=True)


        
    st.markdown("""<pre><p style='text-align: center; color: black; font-family: verdana;'>
Durante el transcurso de la pandemia de COVID-19, en M칠xico se han alcanzado altos niveles de ocupaci칩n hospitalaria,
lo cual ha obligado a m칠dicos de primera l칤nea a priorizar recursos, sin embargo, para llevar a cabo este proceso no existe
un m칠todo sistem칠tico m치s all치 de la experiencia humana. A pesar de los avances en la vacunaci칩n, la aparici칩n de nuevas
variables como la Delta ha ocasionado un n칰mero elevado de contagios cuya tendencia c칤clica se proyecta que contin칰e durante 
el resto de 2021 y 2022. Actualmente existen herramientas para calcular el riesgo de mortalidad por COVID-19, sin embargo, una
limitante central se encuentra en el sesgo de los datos, ya que solo el 7.6 % son casos de defunciones, por lo que los algoritmos
de machine learning tradicionales suelen tener desviaciones y no asignar predicciones certeramente. El presente estudio
aborda el desarrollo de una herramienta informativa para predecir la probabilidad de defunci칩n con base en caracter칤sticas de
la persona como la edad, sexo y comorbilidades. Mediante el uso de t칠cnicas de aprendizaje profundo se logra comprender la
din치mica interna de los datos y ejecutar predicciones sin sesgos. El modelo generado, demostr칩 ser estad칤sticamente m치s preciso
que 5 algoritmos de machine learning bajo el test de McNemar, obteniendo una precisi칩n promedio del 87.34 % 픢= 0.04 para la 
identificaci칩n de pacientes con riesgo en el lapso del 01 de agosto al 05 de septiembre del 2021.</p></pre>""", unsafe_allow_html = True)


    st.image("imgs/DescripcionFlujoNN.jpg")
    
    st.markdown("<hr>", unsafe_allow_html = True)


elif page == "Aplicaci칩n":
    st.markdown("<h1 style='text-align: center; color: black; font-family: verdana;'>Red Neuronal Multicapa para predecir la probabilidad de defunci칩n en casos de COVID-19</h1>", unsafe_allow_html=True)
    last_plot = None
    list_condiciones = ["Diabetes", "EPOC", "Inmunosupresi칩n","Neumon칤a",
                        "Embarazo", "Cardiovascular", "Renal Cr칩nica",
                        "Tabaquismo", "Obesidad", "Hipertensi칩n"]
    
    col1, col2, col3 = st.columns([0.25,0.15, 0.60])
    
    with col1:
        st.markdown("<h2 style='text-align: center; color: black; font-family: verdana;'>Caracter칤sticas del individuo</h2>", unsafe_allow_html=True)        
        sexo = st.radio("Sexo", ("Hombre", "Mujer"), index = 0) == "Hombre"
        edad = st.number_input("Edad", min_value = 1,value = 50, max_value = 105, step =  1)/105
        indigena = int(st.checkbox("Origen Ind칤gena"))
        condiciones = st.multiselect("Condiciones", list_condiciones, default= ["Neumon칤a"])
        dias_sint = st.number_input("D칤as con s칤ntomas", min_value=0 , max_value= 15, value = 5,step = 1)/15    
          
    with col3:
        st.markdown("<h3 style='text-align: center; color: black; font-family: verdana;'>Probabilidad de defunci칩n</h3>", unsafe_allow_html=True)
        riesgo = st.empty()
    
    
    st.markdown("<hr><h1 style='text-align: center; color: black; font-family: verdana;'>Versi칩n del Modelo</h1>",
                unsafe_allow_html = True)
    
    st.text("칔ltima Actualizaci칩n:")
    st.text(models_data[models_names[-1]]["act"] + ", ver: " + models_data[models_names[-1]]["ver"])
    
    st.markdown("<h2 style='text-align: center; color: black; font-family: verdana;'>Selecciona la versi칩n del modelo a utilizar:</h2>", unsafe_allow_html=True)        
    
    selected_model = st.selectbox("Modelo:", models_names, index = len(models_names)-1)
    
    ## MODEL
    NN = get_model()
    
    st.text("Datos en uso desde 01 de marzo hasta el " + models_data[selected_model]['act']+ ", versi칩n " + models_data[selected_model]['ver']+".")

    col1, col2, col3 = st.columns([0.35, 0.60, 0.25])
    
    with col2:
    
        st.image("imgs/"+ selected_model +"_esquema.png", caption = "Esquema de entrenamiento del modelo", width = 550)
    
    actual_condiciones = []
    for cond in list_condiciones:
        actual_condiciones.append(cond in condiciones)
    pred_vector = np.array([sexo, edad, indigena]+actual_condiciones+[dias_sint]).reshape((1,14))
    riesgo.plotly_chart(get_gauge(NN.predict(pred_vector)[0][0]))
    
    
